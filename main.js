/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MostUsedWordsPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var MostUsedWordsPlugin = class extends import_obsidian.Plugin {
  async onload() {
    console.log("Most Used Words plugin loaded.");
    this.addRibbonIcon("document", "Show Most Used Words Graph", async () => {
      await this.showGraph();
    });
    this.addCommand({
      id: "show-most-used-words-list",
      name: "Show Most Used Words List",
      callback: async () => {
        await this.showMostUsedWordsList();
      }
    });
  }
  async showGraph() {
  }
  async showMostUsedWordsList() {
    const notes = this.app.vault.getMarkdownFiles();
    const wordCountMap = /* @__PURE__ */ new Map();
    for (const note of notes) {
      const content = await this.app.vault.read(note);
      const words = content.split(/\s+/);
      words.forEach((word) => {
        const normalizedWord = word.toLowerCase();
        if (normalizedWord.length > 0) {
          const count = wordCountMap.get(normalizedWord) || 0;
          wordCountMap.set(normalizedWord, count + 1);
        }
      });
    }
    const sortedWords = Array.from(wordCountMap.entries()).sort(
      (a, b) => b[1] - a[1]
    );
    const topWords = sortedWords.slice(0, 100);
    const wordList = topWords.map(([word, count], index) => `${index + 1}: ${word} (${count})`).join("\n");
    const fileName = "MostUsedWordsList.md";
    const fileContent = `# Top 100 Most Used Words

${wordList}`;
    await this.app.vault.create(fileName, fileContent);
  }
  onunload() {
    console.log("Most Used Words plugin unloaded.");
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9zdFVzZWRXb3Jkc1BsdWdpbiBleHRlbmRzIFBsdWdpbiB7XHJcbiAgICBhc3luYyBvbmxvYWQoKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ01vc3QgVXNlZCBXb3JkcyBwbHVnaW4gbG9hZGVkLicpO1xyXG5cclxuICAgICAgICB0aGlzLmFkZFJpYmJvbkljb24oJ2RvY3VtZW50JywgJ1Nob3cgTW9zdCBVc2VkIFdvcmRzIEdyYXBoJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnNob3dHcmFwaCgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xyXG4gICAgICAgICAgICBpZDogJ3Nob3ctbW9zdC11c2VkLXdvcmRzLWxpc3QnLFxyXG4gICAgICAgICAgICBuYW1lOiAnU2hvdyBNb3N0IFVzZWQgV29yZHMgTGlzdCcsXHJcbiAgICAgICAgICAgIGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnNob3dNb3N0VXNlZFdvcmRzTGlzdCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgc2hvd0dyYXBoKCkge1xyXG4gICAgICAgIC8vIFlvdXIgY29kZSB0byBkaXNwbGF5IHRoZSBncmFwaCB1c2luZyBQbG90bHkuanNcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBzaG93TW9zdFVzZWRXb3Jkc0xpc3QoKSB7XHJcbiAgICAgICAgLy8gR2V0IGFsbCBub3Rlc1xyXG4gICAgICAgIGNvbnN0IG5vdGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xyXG5cclxuICAgICAgICAvLyBDb3VudCB3b3JkIG9jY3VycmVuY2VzXHJcbiAgICAgICAgY29uc3Qgd29yZENvdW50TWFwID0gbmV3IE1hcDxzdHJpbmcsIG51bWJlcj4oKTtcclxuICAgICAgICBmb3IgKGNvbnN0IG5vdGUgb2Ygbm90ZXMpIHtcclxuICAgICAgICAgICAgY29uc3QgY29udGVudCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LnJlYWQobm90ZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHdvcmRzID0gY29udGVudC5zcGxpdCgvXFxzKy8pO1xyXG4gICAgICAgICAgICB3b3Jkcy5mb3JFYWNoKCh3b3JkOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRXb3JkID0gd29yZC50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWRXb3JkLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb3VudCA9IHdvcmRDb3VudE1hcC5nZXQobm9ybWFsaXplZFdvcmQpIHx8IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgd29yZENvdW50TWFwLnNldChub3JtYWxpemVkV29yZCwgY291bnQgKyAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBTb3J0IGJ5IHdvcmQgY291bnRcclxuICAgICAgICBjb25zdCBzb3J0ZWRXb3JkcyA9IEFycmF5LmZyb20od29yZENvdW50TWFwLmVudHJpZXMoKSkuc29ydChcclxuICAgICAgICAgICAgKGEsIGIpID0+IGJbMV0gLSBhWzFdXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLy8gRGlzcGxheSB0b3AgMTAwIG1vc3QgdXNlZCB3b3Jkc1xyXG4gICAgICAgIGNvbnN0IHRvcFdvcmRzID0gc29ydGVkV29yZHMuc2xpY2UoMCwgMTAwKTtcclxuICAgICAgICBjb25zdCB3b3JkTGlzdCA9IHRvcFdvcmRzLm1hcCgoW3dvcmQsIGNvdW50XSwgaW5kZXgpID0+IGAke2luZGV4ICsgMX06ICR7d29yZH0gKCR7Y291bnR9KWApLmpvaW4oJ1xcbicpO1xyXG5cclxuICAgICAgICAvLyBDcmVhdGUgYSBuZXcgTWFya2Rvd24gZmlsZSB3aXRoIHRoZSBsaXN0IG9mIG1vc3QgdXNlZCB3b3Jkc1xyXG4gICAgICAgIGNvbnN0IGZpbGVOYW1lID0gJ01vc3RVc2VkV29yZHNMaXN0Lm1kJztcclxuICAgICAgICBjb25zdCBmaWxlQ29udGVudCA9IGAjIFRvcCAxMDAgTW9zdCBVc2VkIFdvcmRzXFxuXFxuJHt3b3JkTGlzdH1gO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuYXBwLnZhdWx0LmNyZWF0ZShmaWxlTmFtZSwgZmlsZUNvbnRlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIG9udW5sb2FkKCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdNb3N0IFVzZWQgV29yZHMgcGx1Z2luIHVubG9hZGVkLicpO1xyXG4gICAgfVxyXG59XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBdUI7QUFFdkIsSUFBcUIsc0JBQXJCLGNBQWlELHVCQUFPO0FBQUEsRUFDcEQsTUFBTSxTQUFTO0FBQ1gsWUFBUSxJQUFJLGdDQUFnQztBQUU1QyxTQUFLLGNBQWMsWUFBWSw4QkFBOEIsWUFBWTtBQUNyRSxZQUFNLEtBQUssVUFBVTtBQUFBLElBQ3pCLENBQUM7QUFFRCxTQUFLLFdBQVc7QUFBQSxNQUNaLElBQUk7QUFBQSxNQUNKLE1BQU07QUFBQSxNQUNOLFVBQVUsWUFBWTtBQUNsQixjQUFNLEtBQUssc0JBQXNCO0FBQUEsTUFDckM7QUFBQSxJQUNKLENBQUM7QUFBQSxFQUNMO0FBQUEsRUFFQSxNQUFNLFlBQVk7QUFBQSxFQUVsQjtBQUFBLEVBRUEsTUFBTSx3QkFBd0I7QUFFMUIsVUFBTSxRQUFRLEtBQUssSUFBSSxNQUFNLGlCQUFpQjtBQUc5QyxVQUFNLGVBQWUsb0JBQUksSUFBb0I7QUFDN0MsZUFBVyxRQUFRLE9BQU87QUFDdEIsWUFBTSxVQUFVLE1BQU0sS0FBSyxJQUFJLE1BQU0sS0FBSyxJQUFJO0FBQzlDLFlBQU0sUUFBUSxRQUFRLE1BQU0sS0FBSztBQUNqQyxZQUFNLFFBQVEsQ0FBQyxTQUFpQjtBQUM1QixjQUFNLGlCQUFpQixLQUFLLFlBQVk7QUFDeEMsWUFBSSxlQUFlLFNBQVMsR0FBRztBQUMzQixnQkFBTSxRQUFRLGFBQWEsSUFBSSxjQUFjLEtBQUs7QUFDbEQsdUJBQWEsSUFBSSxnQkFBZ0IsUUFBUSxDQUFDO0FBQUEsUUFDOUM7QUFBQSxNQUNKLENBQUM7QUFBQSxJQUNMO0FBR0EsVUFBTSxjQUFjLE1BQU0sS0FBSyxhQUFhLFFBQVEsQ0FBQyxFQUFFO0FBQUEsTUFDbkQsQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQUEsSUFDeEI7QUFHQSxVQUFNLFdBQVcsWUFBWSxNQUFNLEdBQUcsR0FBRztBQUN6QyxVQUFNLFdBQVcsU0FBUyxJQUFJLENBQUMsQ0FBQyxNQUFNLEtBQUssR0FBRyxVQUFVLEdBQUcsUUFBUSxNQUFNLFNBQVMsUUFBUSxFQUFFLEtBQUssSUFBSTtBQUdyRyxVQUFNLFdBQVc7QUFDakIsVUFBTSxjQUFjO0FBQUE7QUFBQSxFQUFnQztBQUNwRCxVQUFNLEtBQUssSUFBSSxNQUFNLE9BQU8sVUFBVSxXQUFXO0FBQUEsRUFDckQ7QUFBQSxFQUVBLFdBQVc7QUFDUCxZQUFRLElBQUksa0NBQWtDO0FBQUEsRUFDbEQ7QUFDSjsiLAogICJuYW1lcyI6IFtdCn0K
