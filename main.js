/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MostUsedWordsPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var MostUsedWordsPlugin = class extends import_obsidian.Plugin {
  async onload() {
    console.log("Most Used Words plugin loaded.");
    this.addRibbonIcon("graph", "Show Most Used Words Graph", async () => {
      await this.showGraph();
    });
  }
  async showGraph() {
    const plotlyScript = document.createElement("script");
    plotlyScript.src = "plotly-latest.min.js";
    document.head.appendChild(plotlyScript);
    plotlyScript.onload = () => {
      this.plotChart();
    };
  }
  plotChart() {
    const notes = this.app.vault.getMarkdownFiles();
    const wordCountMap = /* @__PURE__ */ new Map();
    notes.forEach(async (note) => {
      const content = await this.app.vault.read(note);
      const words = content.split(/\s+/);
      words.forEach((word) => {
        const normalizedWord = word.toLowerCase();
        if (normalizedWord.length > 0) {
          const count = wordCountMap.get(normalizedWord) || 0;
          wordCountMap.set(normalizedWord, count + 1);
        }
      });
    });
    const sortedWords = Array.from(wordCountMap.entries()).sort(
      (a, b) => b[1] - a[1]
    );
    const topWords = sortedWords.slice(0, 100);
    console.log("Top 100 Most Used Words:", topWords);
    const data = [{
      x: topWords.map(([word]) => word),
      y: topWords.map(([_, count]) => count),
      type: "bar"
    }];
    const layout = {
      title: "Most Used Words",
      xaxis: { title: "Word" },
      yaxis: { title: "Frequency" }
    };
    Plotly.newPlot("word-chart", data, layout);
  }
  onunload() {
    console.log("Most Used Words plugin unloaded.");
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5cclxuZGVjbGFyZSB2YXIgUGxvdGx5OiBhbnk7IC8vIERlY2xhcmUgUGxvdGx5IGFzIGEgZ2xvYmFsIHZhcmlhYmxlXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb3N0VXNlZFdvcmRzUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcclxuICAgIGFzeW5jIG9ubG9hZCgpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnTW9zdCBVc2VkIFdvcmRzIHBsdWdpbiBsb2FkZWQuJyk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkUmliYm9uSWNvbignZ3JhcGgnLCAnU2hvdyBNb3N0IFVzZWQgV29yZHMgR3JhcGgnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuc2hvd0dyYXBoKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgc2hvd0dyYXBoKCkge1xyXG4gICAgICAgIC8vIExvYWQgUGxvdGx5LmpzXHJcbiAgICAgICAgY29uc3QgcGxvdGx5U2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgICAgICAgcGxvdGx5U2NyaXB0LnNyYyA9ICdwbG90bHktbGF0ZXN0Lm1pbi5qcyc7IC8vIFVwZGF0ZSB3aXRoIHRoZSBjb3JyZWN0IHBhdGhcclxuICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHBsb3RseVNjcmlwdCk7XHJcblxyXG4gICAgICAgIHBsb3RseVNjcmlwdC5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIFBsb3RseS5qcyBpcyBub3cgbG9hZGVkLCB5b3UgY2FuIHVzZSBpdCBoZXJlXHJcbiAgICAgICAgICAgIHRoaXMucGxvdENoYXJ0KCk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBwbG90Q2hhcnQoKSB7XHJcbiAgICAgICAgLy8gR2V0IGFsbCBub3Rlc1xyXG4gICAgICAgIGNvbnN0IG5vdGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xyXG5cclxuICAgICAgICAvLyBDb3VudCB3b3JkIG9jY3VycmVuY2VzXHJcbiAgICAgICAgY29uc3Qgd29yZENvdW50TWFwID0gbmV3IE1hcDxzdHJpbmcsIG51bWJlcj4oKTtcclxuICAgICAgICBub3Rlcy5mb3JFYWNoKGFzeW5jIChub3RlKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5yZWFkKG5vdGUpO1xyXG4gICAgICAgICAgICBjb25zdCB3b3JkcyA9IGNvbnRlbnQuc3BsaXQoL1xccysvKTtcclxuICAgICAgICAgICAgd29yZHMuZm9yRWFjaCgod29yZDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBub3JtYWxpemVkV29yZCA9IHdvcmQudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgIGlmIChub3JtYWxpemVkV29yZC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY291bnQgPSB3b3JkQ291bnRNYXAuZ2V0KG5vcm1hbGl6ZWRXb3JkKSB8fCAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHdvcmRDb3VudE1hcC5zZXQobm9ybWFsaXplZFdvcmQsIGNvdW50ICsgMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBTb3J0IGJ5IHdvcmQgY291bnRcclxuICAgICAgICBjb25zdCBzb3J0ZWRXb3JkcyA9IEFycmF5LmZyb20od29yZENvdW50TWFwLmVudHJpZXMoKSkuc29ydChcclxuICAgICAgICAgICAgKGEsIGIpID0+IGJbMV0gLSBhWzFdXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLy8gRGlzcGxheSB0b3AgMTAwIG1vc3QgdXNlZCB3b3Jkc1xyXG4gICAgICAgIGNvbnN0IHRvcFdvcmRzID0gc29ydGVkV29yZHMuc2xpY2UoMCwgMTAwKTtcclxuICAgICAgICBjb25zb2xlLmxvZygnVG9wIDEwMCBNb3N0IFVzZWQgV29yZHM6JywgdG9wV29yZHMpO1xyXG5cclxuICAgICAgICAvLyBHZW5lcmF0ZSBncmFwaCBkYXRhXHJcbiAgICAgICAgY29uc3QgZGF0YSA9IFt7XHJcbiAgICAgICAgICAgIHg6IHRvcFdvcmRzLm1hcCgoW3dvcmRdKSA9PiB3b3JkKSxcclxuICAgICAgICAgICAgeTogdG9wV29yZHMubWFwKChbXywgY291bnRdKSA9PiBjb3VudCksXHJcbiAgICAgICAgICAgIHR5cGU6ICdiYXInXHJcbiAgICAgICAgfV07XHJcblxyXG4gICAgICAgIC8vIFNldCBsYXlvdXRcclxuICAgICAgICBjb25zdCBsYXlvdXQgPSB7XHJcbiAgICAgICAgICAgIHRpdGxlOiAnTW9zdCBVc2VkIFdvcmRzJyxcclxuICAgICAgICAgICAgeGF4aXM6IHsgdGl0bGU6ICdXb3JkJyB9LFxyXG4gICAgICAgICAgICB5YXhpczogeyB0aXRsZTogJ0ZyZXF1ZW5jeScgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIFBsb3QgdGhlIGdyYXBoXHJcbiAgICAgICAgUGxvdGx5Lm5ld1Bsb3QoJ3dvcmQtY2hhcnQnLCBkYXRhLCBsYXlvdXQpO1xyXG4gICAgfVxyXG5cclxuICAgIG9udW5sb2FkKCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdNb3N0IFVzZWQgV29yZHMgcGx1Z2luIHVubG9hZGVkLicpO1xyXG4gICAgfVxyXG59XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBdUI7QUFJdkIsSUFBcUIsc0JBQXJCLGNBQWlELHVCQUFPO0FBQUEsRUFDcEQsTUFBTSxTQUFTO0FBQ1gsWUFBUSxJQUFJLGdDQUFnQztBQUU1QyxTQUFLLGNBQWMsU0FBUyw4QkFBOEIsWUFBWTtBQUNsRSxZQUFNLEtBQUssVUFBVTtBQUFBLElBQ3pCLENBQUM7QUFBQSxFQUNMO0FBQUEsRUFFQSxNQUFNLFlBQVk7QUFFZCxVQUFNLGVBQWUsU0FBUyxjQUFjLFFBQVE7QUFDcEQsaUJBQWEsTUFBTTtBQUNuQixhQUFTLEtBQUssWUFBWSxZQUFZO0FBRXRDLGlCQUFhLFNBQVMsTUFBTTtBQUV4QixXQUFLLFVBQVU7QUFBQSxJQUNuQjtBQUFBLEVBQ0o7QUFBQSxFQUVBLFlBQVk7QUFFUixVQUFNLFFBQVEsS0FBSyxJQUFJLE1BQU0saUJBQWlCO0FBRzlDLFVBQU0sZUFBZSxvQkFBSSxJQUFvQjtBQUM3QyxVQUFNLFFBQVEsT0FBTyxTQUFTO0FBQzFCLFlBQU0sVUFBVSxNQUFNLEtBQUssSUFBSSxNQUFNLEtBQUssSUFBSTtBQUM5QyxZQUFNLFFBQVEsUUFBUSxNQUFNLEtBQUs7QUFDakMsWUFBTSxRQUFRLENBQUMsU0FBaUI7QUFDNUIsY0FBTSxpQkFBaUIsS0FBSyxZQUFZO0FBQ3hDLFlBQUksZUFBZSxTQUFTLEdBQUc7QUFDM0IsZ0JBQU0sUUFBUSxhQUFhLElBQUksY0FBYyxLQUFLO0FBQ2xELHVCQUFhLElBQUksZ0JBQWdCLFFBQVEsQ0FBQztBQUFBLFFBQzlDO0FBQUEsTUFDSixDQUFDO0FBQUEsSUFDTCxDQUFDO0FBR0QsVUFBTSxjQUFjLE1BQU0sS0FBSyxhQUFhLFFBQVEsQ0FBQyxFQUFFO0FBQUEsTUFDbkQsQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQUEsSUFDeEI7QUFHQSxVQUFNLFdBQVcsWUFBWSxNQUFNLEdBQUcsR0FBRztBQUN6QyxZQUFRLElBQUksNEJBQTRCLFFBQVE7QUFHaEQsVUFBTSxPQUFPLENBQUM7QUFBQSxNQUNWLEdBQUcsU0FBUyxJQUFJLENBQUMsQ0FBQyxJQUFJLE1BQU0sSUFBSTtBQUFBLE1BQ2hDLEdBQUcsU0FBUyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssTUFBTSxLQUFLO0FBQUEsTUFDckMsTUFBTTtBQUFBLElBQ1YsQ0FBQztBQUdELFVBQU0sU0FBUztBQUFBLE1BQ1gsT0FBTztBQUFBLE1BQ1AsT0FBTyxFQUFFLE9BQU8sT0FBTztBQUFBLE1BQ3ZCLE9BQU8sRUFBRSxPQUFPLFlBQVk7QUFBQSxJQUNoQztBQUdBLFdBQU8sUUFBUSxjQUFjLE1BQU0sTUFBTTtBQUFBLEVBQzdDO0FBQUEsRUFFQSxXQUFXO0FBQ1AsWUFBUSxJQUFJLGtDQUFrQztBQUFBLEVBQ2xEO0FBQ0o7IiwKICAibmFtZXMiOiBbXQp9Cg==
