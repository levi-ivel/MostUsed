/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MostUsedWordsPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var MostUsedWordsPlugin = class extends import_obsidian.Plugin {
  onload() {
    console.log("Most Used Words plugin loaded.");
    this.addRibbonIcon("document", "Show Most Used Words Graph", async () => {
      await this.showMostUsedWordsList();
    });
    this.addCommand({
      id: "show-most-used-words-list",
      name: "Show Most Used Words List",
      callback: async () => {
        await this.showMostUsedWordsList();
      }
    });
  }
  async showMostUsedWordsList() {
    const notes = this.app.vault.getMarkdownFiles();
    const wordCountMap = /* @__PURE__ */ new Map();
    for (const note of notes) {
      const content = await this.app.vault.read(note);
      const words = content.split(/\s+/);
      words.forEach((word) => {
        const normalizedWord = word.toLowerCase();
        if (normalizedWord.length > 0) {
          const count = wordCountMap.get(normalizedWord) || 0;
          wordCountMap.set(normalizedWord, count + 1);
        }
      });
    }
    const sortedWords = Array.from(wordCountMap.entries()).sort(
      (a, b) => b[1] - a[1]
    );
    const topWords = sortedWords.slice(0, 100);
    const wordList = topWords.map(([word, count], index) => `${index + 1}: ${word} (${count})`).join("<br>");
    const popup = this.createPopup(wordList);
    this.app.workspace.containerEl.appendChild(popup);
  }
  createPopup(content) {
    const popup = document.createElement("div");
    popup.classList.add("my-popup");
    popup.innerHTML = `
            <div class="popup-content">
                <span class="close" onclick="this.parentElement.parentElement.remove()">&times;</span>
                <div class="content">${content}</div>
            </div>
        `;
    popup.style.position = "fixed";
    popup.style.top = "100px";
    popup.style.left = "96%";
    popup.style.transform = "translateX(-50%)";
    const popupContent = popup.querySelector(".content");
    popupContent.style.maxHeight = "500px";
    popupContent.style.overflowY = "auto";
    return popup;
  }
  onunload() {
    console.log("Most Used Words plugin unloaded.");
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9zdFVzZWRXb3Jkc1BsdWdpbiBleHRlbmRzIFBsdWdpbiB7XHJcbiAgICBvbmxvYWQoKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ01vc3QgVXNlZCBXb3JkcyBwbHVnaW4gbG9hZGVkLicpO1xyXG5cclxuICAgICAgICB0aGlzLmFkZFJpYmJvbkljb24oJ2RvY3VtZW50JywgJ1Nob3cgTW9zdCBVc2VkIFdvcmRzIEdyYXBoJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnNob3dNb3N0VXNlZFdvcmRzTGlzdCgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xyXG4gICAgICAgICAgICBpZDogJ3Nob3ctbW9zdC11c2VkLXdvcmRzLWxpc3QnLFxyXG4gICAgICAgICAgICBuYW1lOiAnU2hvdyBNb3N0IFVzZWQgV29yZHMgTGlzdCcsXHJcbiAgICAgICAgICAgIGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnNob3dNb3N0VXNlZFdvcmRzTGlzdCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgc2hvd01vc3RVc2VkV29yZHNMaXN0KCkge1xyXG4gICAgICAgIC8vIEdldCBhbGwgbm90ZXNcclxuICAgICAgICBjb25zdCBub3RlcyA9IHRoaXMuYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcclxuXHJcbiAgICAgICAgLy8gQ291bnQgd29yZCBvY2N1cnJlbmNlc1xyXG4gICAgICAgIGNvbnN0IHdvcmRDb3VudE1hcCA9IG5ldyBNYXAoKTtcclxuICAgICAgICBmb3IgKGNvbnN0IG5vdGUgb2Ygbm90ZXMpIHtcclxuICAgICAgICAgICAgY29uc3QgY29udGVudCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LnJlYWQobm90ZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHdvcmRzID0gY29udGVudC5zcGxpdCgvXFxzKy8pO1xyXG4gICAgICAgICAgICB3b3Jkcy5mb3JFYWNoKHdvcmQgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZFdvcmQgPSB3b3JkLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAobm9ybWFsaXplZFdvcmQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvdW50ID0gd29yZENvdW50TWFwLmdldChub3JtYWxpemVkV29yZCkgfHwgMDtcclxuICAgICAgICAgICAgICAgICAgICB3b3JkQ291bnRNYXAuc2V0KG5vcm1hbGl6ZWRXb3JkLCBjb3VudCArIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFNvcnQgYnkgd29yZCBjb3VudFxyXG4gICAgICAgIGNvbnN0IHNvcnRlZFdvcmRzID0gQXJyYXkuZnJvbSh3b3JkQ291bnRNYXAuZW50cmllcygpKS5zb3J0KFxyXG4gICAgICAgICAgICAoYSwgYikgPT4gYlsxXSAtIGFbMV1cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBEaXNwbGF5IHRvcCAxMDAgbW9zdCB1c2VkIHdvcmRzIGluIGEgcG9wdXAgd2luZG93XHJcbiAgICAgICAgY29uc3QgdG9wV29yZHMgPSBzb3J0ZWRXb3Jkcy5zbGljZSgwLCAxMDApO1xyXG4gICAgICAgIGNvbnN0IHdvcmRMaXN0ID0gdG9wV29yZHMubWFwKChbd29yZCwgY291bnRdLCBpbmRleCkgPT4gYCR7aW5kZXggKyAxfTogJHt3b3JkfSAoJHtjb3VudH0pYCkuam9pbignPGJyPicpO1xyXG5cclxuICAgICAgICBjb25zdCBwb3B1cCA9IHRoaXMuY3JlYXRlUG9wdXAod29yZExpc3QpO1xyXG4gICAgICAgIHRoaXMuYXBwLndvcmtzcGFjZS5jb250YWluZXJFbC5hcHBlbmRDaGlsZChwb3B1cCk7XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlUG9wdXAoY29udGVudDogc3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3QgcG9wdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICBwb3B1cC5jbGFzc0xpc3QuYWRkKCdteS1wb3B1cCcpO1xyXG4gICAgICAgIHBvcHVwLmlubmVySFRNTCA9IGBcclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBvcHVwLWNvbnRlbnRcIj5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiY2xvc2VcIiBvbmNsaWNrPVwidGhpcy5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQucmVtb3ZlKClcIj4mdGltZXM7PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRlbnRcIj4ke2NvbnRlbnR9PC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIGA7XHJcbiAgICAgICAgLy8gQXBwbHlpbmcgQ1NTIHN0eWxlc1xyXG4gICAgICAgIHBvcHVwLnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJztcclxuICAgICAgICBwb3B1cC5zdHlsZS50b3AgPSAnMTAwcHgnOyAvLyBBZGp1c3QgdGhpcyB2YWx1ZSBhcyBuZWVkZWRcclxuICAgICAgICBwb3B1cC5zdHlsZS5sZWZ0ID0gJzk2JSc7XHJcbiAgICAgICAgcG9wdXAuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVgoLTUwJSknO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFNldHRpbmcgbWF4aW11bSBoZWlnaHQgZm9yIHRoZSBjb250ZW50XHJcbiAgICAgICAgY29uc3QgcG9wdXBDb250ZW50ID0gcG9wdXAucXVlcnlTZWxlY3RvcignLmNvbnRlbnQnKSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICBwb3B1cENvbnRlbnQuc3R5bGUubWF4SGVpZ2h0ID0gJzUwMHB4JzsgLy8gQWRqdXN0IHRoaXMgdmFsdWUgYXMgbmVlZGVkXHJcbiAgICAgICAgcG9wdXBDb250ZW50LnN0eWxlLm92ZXJmbG93WSA9ICdhdXRvJzsgLy8gRW5hYmxlIHZlcnRpY2FsIHNjcm9sbGluZ1xyXG4gICAgXHJcbiAgICAgICAgcmV0dXJuIHBvcHVwO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBcclxuICAgIFxyXG4gICAgXHJcblxyXG4gICAgb251bmxvYWQoKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ01vc3QgVXNlZCBXb3JkcyBwbHVnaW4gdW5sb2FkZWQuJyk7XHJcbiAgICB9XHJcbn1cclxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUF1QjtBQUV2QixJQUFxQixzQkFBckIsY0FBaUQsdUJBQU87QUFBQSxFQUNwRCxTQUFTO0FBQ0wsWUFBUSxJQUFJLGdDQUFnQztBQUU1QyxTQUFLLGNBQWMsWUFBWSw4QkFBOEIsWUFBWTtBQUNyRSxZQUFNLEtBQUssc0JBQXNCO0FBQUEsSUFDckMsQ0FBQztBQUVELFNBQUssV0FBVztBQUFBLE1BQ1osSUFBSTtBQUFBLE1BQ0osTUFBTTtBQUFBLE1BQ04sVUFBVSxZQUFZO0FBQ2xCLGNBQU0sS0FBSyxzQkFBc0I7QUFBQSxNQUNyQztBQUFBLElBQ0osQ0FBQztBQUFBLEVBQ0w7QUFBQSxFQUVBLE1BQU0sd0JBQXdCO0FBRTFCLFVBQU0sUUFBUSxLQUFLLElBQUksTUFBTSxpQkFBaUI7QUFHOUMsVUFBTSxlQUFlLG9CQUFJLElBQUk7QUFDN0IsZUFBVyxRQUFRLE9BQU87QUFDdEIsWUFBTSxVQUFVLE1BQU0sS0FBSyxJQUFJLE1BQU0sS0FBSyxJQUFJO0FBQzlDLFlBQU0sUUFBUSxRQUFRLE1BQU0sS0FBSztBQUNqQyxZQUFNLFFBQVEsVUFBUTtBQUNsQixjQUFNLGlCQUFpQixLQUFLLFlBQVk7QUFDeEMsWUFBSSxlQUFlLFNBQVMsR0FBRztBQUMzQixnQkFBTSxRQUFRLGFBQWEsSUFBSSxjQUFjLEtBQUs7QUFDbEQsdUJBQWEsSUFBSSxnQkFBZ0IsUUFBUSxDQUFDO0FBQUEsUUFDOUM7QUFBQSxNQUNKLENBQUM7QUFBQSxJQUNMO0FBR0EsVUFBTSxjQUFjLE1BQU0sS0FBSyxhQUFhLFFBQVEsQ0FBQyxFQUFFO0FBQUEsTUFDbkQsQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQUEsSUFDeEI7QUFHQSxVQUFNLFdBQVcsWUFBWSxNQUFNLEdBQUcsR0FBRztBQUN6QyxVQUFNLFdBQVcsU0FBUyxJQUFJLENBQUMsQ0FBQyxNQUFNLEtBQUssR0FBRyxVQUFVLEdBQUcsUUFBUSxNQUFNLFNBQVMsUUFBUSxFQUFFLEtBQUssTUFBTTtBQUV2RyxVQUFNLFFBQVEsS0FBSyxZQUFZLFFBQVE7QUFDdkMsU0FBSyxJQUFJLFVBQVUsWUFBWSxZQUFZLEtBQUs7QUFBQSxFQUNwRDtBQUFBLEVBRUEsWUFBWSxTQUFpQjtBQUN6QixVQUFNLFFBQVEsU0FBUyxjQUFjLEtBQUs7QUFDMUMsVUFBTSxVQUFVLElBQUksVUFBVTtBQUM5QixVQUFNLFlBQVk7QUFBQTtBQUFBO0FBQUEsdUNBR2E7QUFBQTtBQUFBO0FBSS9CLFVBQU0sTUFBTSxXQUFXO0FBQ3ZCLFVBQU0sTUFBTSxNQUFNO0FBQ2xCLFVBQU0sTUFBTSxPQUFPO0FBQ25CLFVBQU0sTUFBTSxZQUFZO0FBR3hCLFVBQU0sZUFBZSxNQUFNLGNBQWMsVUFBVTtBQUNuRCxpQkFBYSxNQUFNLFlBQVk7QUFDL0IsaUJBQWEsTUFBTSxZQUFZO0FBRS9CLFdBQU87QUFBQSxFQUNYO0FBQUEsRUFNQSxXQUFXO0FBQ1AsWUFBUSxJQUFJLGtDQUFrQztBQUFBLEVBQ2xEO0FBQ0o7IiwKICAibmFtZXMiOiBbXQp9Cg==
