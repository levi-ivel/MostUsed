/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MostUsedWordsPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var MostUsedWordsPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.createdEventListener = null;
  }
  onload() {
    this.createdEventListener = this.handleFileCreation.bind(this);
    if (this.createdEventListener) {
      this.registerEvent(this.app.vault.on("create", this.createdEventListener));
    }
    this.addRibbonIcon("document", "Show Most Used Words Graph", async () => {
      await this.showMostUsedWordsList();
    });
    this.addCommand({
      id: "show-most-used-words-list",
      name: "Show Most Used Words List",
      callback: async () => {
        await this.showMostUsedWordsList();
      }
    });
  }
  handleFileCreation(file) {
  }
  async showMostUsedWordsList() {
    const vault = this.app.vault;
    const notes = vault.getMarkdownFiles();
    const wordCountMap = /* @__PURE__ */ new Map();
    for (const note of notes) {
      const content = await vault.read(note);
      const words = content.split(/\s+/);
      words.forEach((word) => {
        const normalizedWord = word.toLowerCase();
        if (normalizedWord.length > 0) {
          const count = wordCountMap.get(normalizedWord) || 0;
          wordCountMap.set(normalizedWord, count + 1);
        }
      });
    }
    const sortedWords = Array.from(wordCountMap.entries()).sort(
      (a, b) => b[1] - a[1]
    );
    const topWords = sortedWords.slice(0, 100);
    const wordList = topWords.map(([word, count], index) => `${index + 1}: ${word} (${count})`);
    const popup = this.createPopup(wordList);
    this.app.workspace.containerEl.appendChild(popup);
  }
  createPopup(wordList) {
    const popup = document.createElement("div");
    popup.classList.add("my-popup");
    const popupContent = document.createElement("div");
    popupContent.classList.add("popup-content");
    const closeButton = document.createElement("span");
    closeButton.classList.add("close");
    closeButton.textContent = "\xD7";
    closeButton.onclick = () => popup.remove();
    const contentDiv = document.createElement("div");
    wordList.forEach((item) => {
      const itemDiv = document.createElement("div");
      itemDiv.textContent = item;
      contentDiv.appendChild(itemDiv);
    });
    popupContent.appendChild(closeButton);
    popupContent.appendChild(contentDiv);
    popup.appendChild(popupContent);
    return popup;
  }
  onunload() {
    if (this.createdEventListener) {
      this.app.vault.off("create", this.createdEventListener);
      this.createdEventListener = null;
    }
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBUQWJzdHJhY3RGaWxlLCBWYXVsdCB9IGZyb20gJ29ic2lkaWFuJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vc3RVc2VkV29yZHNQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xyXG4gICAgcHJpdmF0ZSBjcmVhdGVkRXZlbnRMaXN0ZW5lcjogKChmaWxlOiBUQWJzdHJhY3RGaWxlKSA9PiB2b2lkKSB8IG51bGwgPSBudWxsO1xyXG5cclxuICAgIG9ubG9hZCgpIHtcclxuICAgICAgICB0aGlzLmNyZWF0ZWRFdmVudExpc3RlbmVyID0gdGhpcy5oYW5kbGVGaWxlQ3JlYXRpb24uYmluZCh0aGlzKTtcclxuICAgICAgICBpZiAodGhpcy5jcmVhdGVkRXZlbnRMaXN0ZW5lcikge1xyXG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyRXZlbnQodGhpcy5hcHAudmF1bHQub24oXCJjcmVhdGVcIiwgdGhpcy5jcmVhdGVkRXZlbnRMaXN0ZW5lcikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5hZGRSaWJib25JY29uKCdkb2N1bWVudCcsICdTaG93IE1vc3QgVXNlZCBXb3JkcyBHcmFwaCcsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5zaG93TW9zdFVzZWRXb3Jkc0xpc3QoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcclxuICAgICAgICAgICAgaWQ6ICdzaG93LW1vc3QtdXNlZC13b3Jkcy1saXN0JyxcclxuICAgICAgICAgICAgbmFtZTogJ1Nob3cgTW9zdCBVc2VkIFdvcmRzIExpc3QnLFxyXG4gICAgICAgICAgICBjYWxsYmFjazogYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zaG93TW9zdFVzZWRXb3Jkc0xpc3QoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGhhbmRsZUZpbGVDcmVhdGlvbihmaWxlOiBUQWJzdHJhY3RGaWxlKSB7XHJcbiAgICAgICAgLy8gSGFuZGxlIGZpbGUgY3JlYXRpb24gZXZlbnRcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBzaG93TW9zdFVzZWRXb3Jkc0xpc3QoKSB7XHJcbiAgICAgICAgLy8gR2V0IGFsbCBub3Rlc1xyXG4gICAgICAgIGNvbnN0IHZhdWx0ID0gdGhpcy5hcHAudmF1bHQ7XHJcbiAgICAgICAgY29uc3Qgbm90ZXMgPSB2YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XHJcblxyXG4gICAgICAgIC8vIENvdW50IHdvcmQgb2NjdXJyZW5jZXNcclxuICAgICAgICBjb25zdCB3b3JkQ291bnRNYXAgPSBuZXcgTWFwPHN0cmluZywgbnVtYmVyPigpO1xyXG4gICAgICAgIGZvciAoY29uc3Qgbm90ZSBvZiBub3Rlcykge1xyXG4gICAgICAgICAgICBjb25zdCBjb250ZW50ID0gYXdhaXQgdmF1bHQucmVhZChub3RlKTtcclxuICAgICAgICAgICAgY29uc3Qgd29yZHMgPSBjb250ZW50LnNwbGl0KC9cXHMrLyk7XHJcbiAgICAgICAgICAgIHdvcmRzLmZvckVhY2god29yZCA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBub3JtYWxpemVkV29yZCA9IHdvcmQudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgIGlmIChub3JtYWxpemVkV29yZC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY291bnQgPSB3b3JkQ291bnRNYXAuZ2V0KG5vcm1hbGl6ZWRXb3JkKSB8fCAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHdvcmRDb3VudE1hcC5zZXQobm9ybWFsaXplZFdvcmQsIGNvdW50ICsgMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gU29ydCBieSB3b3JkIGNvdW50XHJcbiAgICAgICAgY29uc3Qgc29ydGVkV29yZHMgPSBBcnJheS5mcm9tKHdvcmRDb3VudE1hcC5lbnRyaWVzKCkpLnNvcnQoXHJcbiAgICAgICAgICAgIChhLCBiKSA9PiBiWzFdIC0gYVsxXVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIERpc3BsYXkgdG9wIDEwMCBtb3N0IHVzZWQgd29yZHMgaW4gYSBwb3B1cCB3aW5kb3dcclxuICAgICAgICBjb25zdCB0b3BXb3JkcyA9IHNvcnRlZFdvcmRzLnNsaWNlKDAsIDEwMCk7XHJcbiAgICAgICAgY29uc3Qgd29yZExpc3QgPSB0b3BXb3Jkcy5tYXAoKFt3b3JkLCBjb3VudF0sIGluZGV4KSA9PiBgJHtpbmRleCArIDF9OiAke3dvcmR9ICgke2NvdW50fSlgKTtcclxuXHJcbiAgICAgICAgY29uc3QgcG9wdXAgPSB0aGlzLmNyZWF0ZVBvcHVwKHdvcmRMaXN0KTtcclxuICAgICAgICB0aGlzLmFwcC53b3Jrc3BhY2UuY29udGFpbmVyRWwuYXBwZW5kQ2hpbGQocG9wdXApO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZVBvcHVwKHdvcmRMaXN0OiBzdHJpbmdbXSkge1xyXG4gICAgICAgIGNvbnN0IHBvcHVwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgcG9wdXAuY2xhc3NMaXN0LmFkZCgnbXktcG9wdXAnKTtcclxuICAgIFxyXG4gICAgICAgIGNvbnN0IHBvcHVwQ29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHBvcHVwQ29udGVudC5jbGFzc0xpc3QuYWRkKCdwb3B1cC1jb250ZW50Jyk7XHJcbiAgICBcclxuICAgICAgICBjb25zdCBjbG9zZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgICBjbG9zZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdjbG9zZScpO1xyXG4gICAgICAgIGNsb3NlQnV0dG9uLnRleHRDb250ZW50ID0gJ1x1MDBENyc7XHJcbiAgICAgICAgY2xvc2VCdXR0b24ub25jbGljayA9ICgpID0+IHBvcHVwLnJlbW92ZSgpO1xyXG4gICAgXHJcbiAgICAgICAgY29uc3QgY29udGVudERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHdvcmRMaXN0LmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgaXRlbURpdi50ZXh0Q29udGVudCA9IGl0ZW07XHJcbiAgICAgICAgICAgIGNvbnRlbnREaXYuYXBwZW5kQ2hpbGQoaXRlbURpdik7XHJcbiAgICAgICAgfSk7XHJcbiAgICBcclxuICAgICAgICBwb3B1cENvbnRlbnQuYXBwZW5kQ2hpbGQoY2xvc2VCdXR0b24pO1xyXG4gICAgICAgIHBvcHVwQ29udGVudC5hcHBlbmRDaGlsZChjb250ZW50RGl2KTtcclxuICAgICAgICBwb3B1cC5hcHBlbmRDaGlsZChwb3B1cENvbnRlbnQpO1xyXG4gICAgXHJcbiAgICAgICAgcmV0dXJuIHBvcHVwO1xyXG4gICAgfVxyXG5cclxuICAgIG9udW5sb2FkKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNyZWF0ZWRFdmVudExpc3RlbmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLnZhdWx0Lm9mZihcImNyZWF0ZVwiLCB0aGlzLmNyZWF0ZWRFdmVudExpc3RlbmVyKTtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVkRXZlbnRMaXN0ZW5lciA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBNkM7QUFFN0MsSUFBcUIsc0JBQXJCLGNB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
