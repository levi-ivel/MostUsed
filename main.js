/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MostUsedWordsPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var MostUsedWordsPlugin = class extends import_obsidian.Plugin {
  onload() {
    this.addRibbonIcon("document", "Show Most Used Words Graph", async () => {
      await this.showMostUsedWordsList();
    });
    this.addCommand({
      id: "show-most-used-words-list",
      name: "Show Most Used Words List",
      callback: async () => {
        await this.showMostUsedWordsList();
      }
    });
  }
  async showMostUsedWordsList() {
    const notes = this.app.vault.getMarkdownFiles();
    const wordCountMap = /* @__PURE__ */ new Map();
    for (const note of notes) {
      const content = await this.app.vault.read(note);
      const words = content.split(/\s+/);
      words.forEach((word) => {
        const normalizedWord = word.toLowerCase();
        if (normalizedWord.length > 0) {
          const count = wordCountMap.get(normalizedWord) || 0;
          wordCountMap.set(normalizedWord, count + 1);
        }
      });
    }
    const sortedWords = Array.from(wordCountMap.entries()).sort(
      (a, b) => b[1] - a[1]
    );
    const topWords = sortedWords.slice(0, 100);
    const wordList = topWords.map(([word, count], index) => `${index + 1}: ${word} (${count})`).join("<br>");
    const popup = this.createPopup(wordList);
    this.app.workspace.containerEl.appendChild(popup);
  }
  createPopup(content) {
    const popup = document.createElement("div");
    popup.classList.add("my-popup");
    const popupContent = document.createElement("div");
    popupContent.classList.add("popup-content");
    const closeButton = document.createElement("span");
    closeButton.classList.add("close");
    closeButton.innerHTML = "&times;";
    closeButton.onclick = () => popup.remove();
    const contentDiv = document.createElement("div");
    contentDiv.innerHTML = content;
    popupContent.appendChild(closeButton);
    popupContent.appendChild(contentDiv);
    popup.appendChild(popupContent);
    popup.style.position = "fixed";
    popup.style.top = "100px";
    popup.style.left = "96%";
    popup.style.transform = "translateX(-50%)";
    contentDiv.style.maxHeight = "300px";
    contentDiv.style.overflowY = "auto";
    return popup;
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9zdFVzZWRXb3Jkc1BsdWdpbiBleHRlbmRzIFBsdWdpbiB7XHJcbiAgICBvbmxvYWQoKSB7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkUmliYm9uSWNvbignZG9jdW1lbnQnLCAnU2hvdyBNb3N0IFVzZWQgV29yZHMgR3JhcGgnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuc2hvd01vc3RVc2VkV29yZHNMaXN0KCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XHJcbiAgICAgICAgICAgIGlkOiAnc2hvdy1tb3N0LXVzZWQtd29yZHMtbGlzdCcsXHJcbiAgICAgICAgICAgIG5hbWU6ICdTaG93IE1vc3QgVXNlZCBXb3JkcyBMaXN0JyxcclxuICAgICAgICAgICAgY2FsbGJhY2s6IGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc2hvd01vc3RVc2VkV29yZHNMaXN0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBzaG93TW9zdFVzZWRXb3Jkc0xpc3QoKSB7XHJcbiAgICAgICAgLy8gR2V0IGFsbCBub3Rlc1xyXG4gICAgICAgIGNvbnN0IG5vdGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xyXG5cclxuICAgICAgICAvLyBDb3VudCB3b3JkIG9jY3VycmVuY2VzXHJcbiAgICAgICAgY29uc3Qgd29yZENvdW50TWFwID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIGZvciAoY29uc3Qgbm90ZSBvZiBub3Rlcykge1xyXG4gICAgICAgICAgICBjb25zdCBjb250ZW50ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZChub3RlKTtcclxuICAgICAgICAgICAgY29uc3Qgd29yZHMgPSBjb250ZW50LnNwbGl0KC9cXHMrLyk7XHJcbiAgICAgICAgICAgIHdvcmRzLmZvckVhY2god29yZCA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBub3JtYWxpemVkV29yZCA9IHdvcmQudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgIGlmIChub3JtYWxpemVkV29yZC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY291bnQgPSB3b3JkQ291bnRNYXAuZ2V0KG5vcm1hbGl6ZWRXb3JkKSB8fCAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHdvcmRDb3VudE1hcC5zZXQobm9ybWFsaXplZFdvcmQsIGNvdW50ICsgMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gU29ydCBieSB3b3JkIGNvdW50XHJcbiAgICAgICAgY29uc3Qgc29ydGVkV29yZHMgPSBBcnJheS5mcm9tKHdvcmRDb3VudE1hcC5lbnRyaWVzKCkpLnNvcnQoXHJcbiAgICAgICAgICAgIChhLCBiKSA9PiBiWzFdIC0gYVsxXVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIERpc3BsYXkgdG9wIDEwMCBtb3N0IHVzZWQgd29yZHMgaW4gYSBwb3B1cCB3aW5kb3dcclxuICAgICAgICBjb25zdCB0b3BXb3JkcyA9IHNvcnRlZFdvcmRzLnNsaWNlKDAsIDEwMCk7XHJcbiAgICAgICAgY29uc3Qgd29yZExpc3QgPSB0b3BXb3Jkcy5tYXAoKFt3b3JkLCBjb3VudF0sIGluZGV4KSA9PiBgJHtpbmRleCArIDF9OiAke3dvcmR9ICgke2NvdW50fSlgKS5qb2luKCc8YnI+Jyk7XHJcblxyXG4gICAgICAgIGNvbnN0IHBvcHVwID0gdGhpcy5jcmVhdGVQb3B1cCh3b3JkTGlzdCk7XHJcbiAgICAgICAgdGhpcy5hcHAud29ya3NwYWNlLmNvbnRhaW5lckVsLmFwcGVuZENoaWxkKHBvcHVwKTtcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVQb3B1cChjb250ZW50OiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCBwb3B1cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICAgIHBvcHVwLmNsYXNzTGlzdC5hZGQoJ215LXBvcHVwJyk7XHJcbiAgICBcclxuICAgICAgICBjb25zdCBwb3B1cENvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBwb3B1cENvbnRlbnQuY2xhc3NMaXN0LmFkZCgncG9wdXAtY29udGVudCcpO1xyXG4gICAgXHJcbiAgICAgICAgY29uc3QgY2xvc2VCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcbiAgICAgICAgY2xvc2VCdXR0b24uY2xhc3NMaXN0LmFkZCgnY2xvc2UnKTtcclxuICAgICAgICBjbG9zZUJ1dHRvbi5pbm5lckhUTUwgPSAnJnRpbWVzOyc7XHJcbiAgICAgICAgY2xvc2VCdXR0b24ub25jbGljayA9ICgpID0+IHBvcHVwLnJlbW92ZSgpO1xyXG4gICAgXHJcbiAgICAgICAgY29uc3QgY29udGVudERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGNvbnRlbnREaXYuaW5uZXJIVE1MID0gY29udGVudDtcclxuICAgIFxyXG4gICAgICAgIHBvcHVwQ29udGVudC5hcHBlbmRDaGlsZChjbG9zZUJ1dHRvbik7XHJcbiAgICAgICAgcG9wdXBDb250ZW50LmFwcGVuZENoaWxkKGNvbnRlbnREaXYpO1xyXG4gICAgICAgIHBvcHVwLmFwcGVuZENoaWxkKHBvcHVwQ29udGVudCk7XHJcbiAgICBcclxuICAgICAgICAvLyBBcHBseWluZyBDU1Mgc3R5bGVzXHJcbiAgICAgICAgcG9wdXAuc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnO1xyXG4gICAgICAgIHBvcHVwLnN0eWxlLnRvcCA9ICcxMDBweCc7IC8vIEFkanVzdCB0aGlzIHZhbHVlIGFzIG5lZWRlZFxyXG4gICAgICAgIHBvcHVwLnN0eWxlLmxlZnQgPSAnOTYlJztcclxuICAgICAgICBwb3B1cC5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlWCgtNTAlKSc7XHJcbiAgICBcclxuICAgICAgICAvLyBTZXR0aW5nIG1heGltdW0gaGVpZ2h0IGZvciB0aGUgY29udGVudFxyXG4gICAgICAgIGNvbnRlbnREaXYuc3R5bGUubWF4SGVpZ2h0ID0gJzMwMHB4JzsgLy8gQWRqdXN0IHRoaXMgdmFsdWUgYXMgbmVlZGVkXHJcbiAgICAgICAgY29udGVudERpdi5zdHlsZS5vdmVyZmxvd1kgPSAnYXV0byc7IC8vIEVuYWJsZSB2ZXJ0aWNhbCBzY3JvbGxpbmdcclxuICAgIFxyXG4gICAgICAgIHJldHVybiBwb3B1cDtcclxuICAgIH1cclxuICAgIFxyXG59XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBdUI7QUFFdkIsSUFBcUIsc0JBQXJCLGNBQWlELHVCQUFPO0FBQUEsRUFDcEQsU0FBUztBQUVMLFNBQUssY0FBYyxZQUFZLDhCQUE4QixZQUFZO0FBQ3JFLFlBQU0sS0FBSyxzQkFBc0I7QUFBQSxJQUNyQyxDQUFDO0FBRUQsU0FBSyxXQUFXO0FBQUEsTUFDWixJQUFJO0FBQUEsTUFDSixNQUFNO0FBQUEsTUFDTixVQUFVLFlBQVk7QUFDbEIsY0FBTSxLQUFLLHNCQUFzQjtBQUFBLE1BQ3JDO0FBQUEsSUFDSixDQUFDO0FBQUEsRUFDTDtBQUFBLEVBRUEsTUFBTSx3QkFBd0I7QUFFMUIsVUFBTSxRQUFRLEtBQUssSUFBSSxNQUFNLGlCQUFpQjtBQUc5QyxVQUFNLGVBQWUsb0JBQUksSUFBSTtBQUM3QixlQUFXLFFBQVEsT0FBTztBQUN0QixZQUFNLFVBQVUsTUFBTSxLQUFLLElBQUksTUFBTSxLQUFLLElBQUk7QUFDOUMsWUFBTSxRQUFRLFFBQVEsTUFBTSxLQUFLO0FBQ2pDLFlBQU0sUUFBUSxVQUFRO0FBQ2xCLGNBQU0saUJBQWlCLEtBQUssWUFBWTtBQUN4QyxZQUFJLGVBQWUsU0FBUyxHQUFHO0FBQzNCLGdCQUFNLFFBQVEsYUFBYSxJQUFJLGNBQWMsS0FBSztBQUNsRCx1QkFBYSxJQUFJLGdCQUFnQixRQUFRLENBQUM7QUFBQSxRQUM5QztBQUFBLE1BQ0osQ0FBQztBQUFBLElBQ0w7QUFHQSxVQUFNLGNBQWMsTUFBTSxLQUFLLGFBQWEsUUFBUSxDQUFDLEVBQUU7QUFBQSxNQUNuRCxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7QUFBQSxJQUN4QjtBQUdBLFVBQU0sV0FBVyxZQUFZLE1BQU0sR0FBRyxHQUFHO0FBQ3pDLFVBQU0sV0FBVyxTQUFTLElBQUksQ0FBQyxDQUFDLE1BQU0sS0FBSyxHQUFHLFVBQVUsR0FBRyxRQUFRLE1BQU0sU0FBUyxRQUFRLEVBQUUsS0FBSyxNQUFNO0FBRXZHLFVBQU0sUUFBUSxLQUFLLFlBQVksUUFBUTtBQUN2QyxTQUFLLElBQUksVUFBVSxZQUFZLFlBQVksS0FBSztBQUFBLEVBQ3BEO0FBQUEsRUFFQSxZQUFZLFNBQWlCO0FBQ3pCLFVBQU0sUUFBUSxTQUFTLGNBQWMsS0FBSztBQUMxQyxVQUFNLFVBQVUsSUFBSSxVQUFVO0FBRTlCLFVBQU0sZUFBZSxTQUFTLGNBQWMsS0FBSztBQUNqRCxpQkFBYSxVQUFVLElBQUksZUFBZTtBQUUxQyxVQUFNLGNBQWMsU0FBUyxjQUFjLE1BQU07QUFDakQsZ0JBQVksVUFBVSxJQUFJLE9BQU87QUFDakMsZ0JBQVksWUFBWTtBQUN4QixnQkFBWSxVQUFVLE1BQU0sTUFBTSxPQUFPO0FBRXpDLFVBQU0sYUFBYSxTQUFTLGNBQWMsS0FBSztBQUMvQyxlQUFXLFlBQVk7QUFFdkIsaUJBQWEsWUFBWSxXQUFXO0FBQ3BDLGlCQUFhLFlBQVksVUFBVTtBQUNuQyxVQUFNLFlBQVksWUFBWTtBQUc5QixVQUFNLE1BQU0sV0FBVztBQUN2QixVQUFNLE1BQU0sTUFBTTtBQUNsQixVQUFNLE1BQU0sT0FBTztBQUNuQixVQUFNLE1BQU0sWUFBWTtBQUd4QixlQUFXLE1BQU0sWUFBWTtBQUM3QixlQUFXLE1BQU0sWUFBWTtBQUU3QixXQUFPO0FBQUEsRUFDWDtBQUVKOyIsCiAgIm5hbWVzIjogW10KfQo=
