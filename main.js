/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MostUsedWordsPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var MostUsedWordsPlugin = class extends import_obsidian.Plugin {
  async onload() {
    console.log("Most Used Words plugin loaded.");
    const plotlyScript = document.createElement("script");
    plotlyScript.src = "plotly.js";
    document.head.appendChild(plotlyScript);
    plotlyScript.onload = () => {
      this.plotChart();
    };
  }
  plotChart() {
    const notes = this.app.vault.getMarkdownFiles();
    const wordCountMap = /* @__PURE__ */ new Map();
    notes.forEach(async (note) => {
      const content = await this.app.vault.read(note);
      const words = content.split(/\s+/);
      words.forEach((word) => {
        const normalizedWord = word.toLowerCase();
        if (normalizedWord.length > 0) {
          const count = wordCountMap.get(normalizedWord) || 0;
          wordCountMap.set(normalizedWord, count + 1);
        }
      });
    });
    const sortedWords = Array.from(wordCountMap.entries()).sort(
      (a, b) => b[1] - a[1]
    );
    const topWords = sortedWords.slice(0, 100);
    console.log("Top 100 Most Used Words:", topWords);
    const data = [{
      x: topWords.map(([word]) => word),
      y: topWords.map(([_, count]) => count),
      type: "bar"
    }];
    const layout = {
      title: "Most Used Words",
      xaxis: { title: "Word" },
      yaxis: { title: "Frequency" }
    };
    Plotly.newPlot("word-chart", data, layout);
  }
  onunload() {
    console.log("Most Used Words plugin unloaded.");
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5kZWNsYXJlIHZhciBQbG90bHk6IGFueTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vc3RVc2VkV29yZHNQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xyXG4gICAgYXN5bmMgb25sb2FkKCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdNb3N0IFVzZWQgV29yZHMgcGx1Z2luIGxvYWRlZC4nKTtcclxuXHJcbiAgICAgICAgLy8gTG9hZCBQbG90bHkuanNcclxuICAgICAgICBjb25zdCBwbG90bHlTY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcclxuICAgICAgICBwbG90bHlTY3JpcHQuc3JjID0gJ3Bsb3RseS5qcyc7XHJcbiAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChwbG90bHlTY3JpcHQpO1xyXG5cclxuICAgICAgICBwbG90bHlTY3JpcHQub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBQbG90bHkuanMgaXMgbm93IGxvYWRlZCwgeW91IGNhbiB1c2UgaXQgaGVyZVxyXG4gICAgICAgICAgICB0aGlzLnBsb3RDaGFydCgpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcGxvdENoYXJ0KCkge1xyXG4gICAgICAgIC8vIEdldCBhbGwgbm90ZXNcclxuICAgICAgICBjb25zdCBub3RlcyA9IHRoaXMuYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcclxuXHJcbiAgICAgICAgLy8gQ291bnQgd29yZCBvY2N1cnJlbmNlc1xyXG4gICAgICAgIGNvbnN0IHdvcmRDb3VudE1hcCA9IG5ldyBNYXA8c3RyaW5nLCBudW1iZXI+KCk7XHJcbiAgICAgICAgbm90ZXMuZm9yRWFjaChhc3luYyAobm90ZSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjb250ZW50ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZChub3RlKTtcclxuICAgICAgICAgICAgY29uc3Qgd29yZHMgPSBjb250ZW50LnNwbGl0KC9cXHMrLyk7XHJcbiAgICAgICAgICAgIHdvcmRzLmZvckVhY2goKHdvcmQ6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZFdvcmQgPSB3b3JkLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAobm9ybWFsaXplZFdvcmQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvdW50ID0gd29yZENvdW50TWFwLmdldChub3JtYWxpemVkV29yZCkgfHwgMDtcclxuICAgICAgICAgICAgICAgICAgICB3b3JkQ291bnRNYXAuc2V0KG5vcm1hbGl6ZWRXb3JkLCBjb3VudCArIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gU29ydCBieSB3b3JkIGNvdW50XHJcbiAgICAgICAgY29uc3Qgc29ydGVkV29yZHMgPSBBcnJheS5mcm9tKHdvcmRDb3VudE1hcC5lbnRyaWVzKCkpLnNvcnQoXHJcbiAgICAgICAgICAgIChhLCBiKSA9PiBiWzFdIC0gYVsxXVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIERpc3BsYXkgdG9wIDEwMCBtb3N0IHVzZWQgd29yZHNcclxuICAgICAgICBjb25zdCB0b3BXb3JkcyA9IHNvcnRlZFdvcmRzLnNsaWNlKDAsIDEwMCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ1RvcCAxMDAgTW9zdCBVc2VkIFdvcmRzOicsIHRvcFdvcmRzKTtcclxuXHJcbiAgICAgICAgLy8gR2VuZXJhdGUgZ3JhcGggZGF0YVxyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBbe1xyXG4gICAgICAgICAgICB4OiB0b3BXb3Jkcy5tYXAoKFt3b3JkXSkgPT4gd29yZCksXHJcbiAgICAgICAgICAgIHk6IHRvcFdvcmRzLm1hcCgoW18sIGNvdW50XSkgPT4gY291bnQpLFxyXG4gICAgICAgICAgICB0eXBlOiAnYmFyJ1xyXG4gICAgICAgIH1dO1xyXG5cclxuICAgICAgICAvLyBTZXQgbGF5b3V0XHJcbiAgICAgICAgY29uc3QgbGF5b3V0ID0ge1xyXG4gICAgICAgICAgICB0aXRsZTogJ01vc3QgVXNlZCBXb3JkcycsXHJcbiAgICAgICAgICAgIHhheGlzOiB7IHRpdGxlOiAnV29yZCcgfSxcclxuICAgICAgICAgICAgeWF4aXM6IHsgdGl0bGU6ICdGcmVxdWVuY3knIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBQbG90IHRoZSBncmFwaFxyXG4gICAgICAgIFBsb3RseS5uZXdQbG90KCd3b3JkLWNoYXJ0JywgZGF0YSwgbGF5b3V0KTtcclxuICAgIH1cclxuXHJcbiAgICBvbnVubG9hZCgpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnTW9zdCBVc2VkIFdvcmRzIHBsdWdpbiB1bmxvYWRlZC4nKTtcclxuICAgIH1cclxufVxyXG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBQXVCO0FBR3ZCLElBQXFCLHNCQUFyQixjQUFpRCx1QkFBTztBQUFBLEVBQ3BELE1BQU0sU0FBUztBQUNYLFlBQVEsSUFBSSxnQ0FBZ0M7QUFHNUMsVUFBTSxlQUFlLFNBQVMsY0FBYyxRQUFRO0FBQ3BELGlCQUFhLE1BQU07QUFDbkIsYUFBUyxLQUFLLFlBQVksWUFBWTtBQUV0QyxpQkFBYSxTQUFTLE1BQU07QUFFeEIsV0FBSyxVQUFVO0FBQUEsSUFDbkI7QUFBQSxFQUNKO0FBQUEsRUFFQSxZQUFZO0FBRVIsVUFBTSxRQUFRLEtBQUssSUFBSSxNQUFNLGlCQUFpQjtBQUc5QyxVQUFNLGVBQWUsb0JBQUksSUFBb0I7QUFDN0MsVUFBTSxRQUFRLE9BQU8sU0FBUztBQUMxQixZQUFNLFVBQVUsTUFBTSxLQUFLLElBQUksTUFBTSxLQUFLLElBQUk7QUFDOUMsWUFBTSxRQUFRLFFBQVEsTUFBTSxLQUFLO0FBQ2pDLFlBQU0sUUFBUSxDQUFDLFNBQWlCO0FBQzVCLGNBQU0saUJBQWlCLEtBQUssWUFBWTtBQUN4QyxZQUFJLGVBQWUsU0FBUyxHQUFHO0FBQzNCLGdCQUFNLFFBQVEsYUFBYSxJQUFJLGNBQWMsS0FBSztBQUNsRCx1QkFBYSxJQUFJLGdCQUFnQixRQUFRLENBQUM7QUFBQSxRQUM5QztBQUFBLE1BQ0osQ0FBQztBQUFBLElBQ0wsQ0FBQztBQUdELFVBQU0sY0FBYyxNQUFNLEtBQUssYUFBYSxRQUFRLENBQUMsRUFBRTtBQUFBLE1BQ25ELENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUFBLElBQ3hCO0FBR0EsVUFBTSxXQUFXLFlBQVksTUFBTSxHQUFHLEdBQUc7QUFDekMsWUFBUSxJQUFJLDRCQUE0QixRQUFRO0FBR2hELFVBQU0sT0FBTyxDQUFDO0FBQUEsTUFDVixHQUFHLFNBQVMsSUFBSSxDQUFDLENBQUMsSUFBSSxNQUFNLElBQUk7QUFBQSxNQUNoQyxHQUFHLFNBQVMsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLE1BQU0sS0FBSztBQUFBLE1BQ3JDLE1BQU07QUFBQSxJQUNWLENBQUM7QUFHRCxVQUFNLFNBQVM7QUFBQSxNQUNYLE9BQU87QUFBQSxNQUNQLE9BQU8sRUFBRSxPQUFPLE9BQU87QUFBQSxNQUN2QixPQUFPLEVBQUUsT0FBTyxZQUFZO0FBQUEsSUFDaEM7QUFHQSxXQUFPLFFBQVEsY0FBYyxNQUFNLE1BQU07QUFBQSxFQUM3QztBQUFBLEVBRUEsV0FBVztBQUNQLFlBQVEsSUFBSSxrQ0FBa0M7QUFBQSxFQUNsRDtBQUNKOyIsCiAgIm5hbWVzIjogW10KfQo=
