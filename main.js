/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MostUsedWordsPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var MostUsedWordsPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.wordCountMap = /* @__PURE__ */ new Map();
    this.activeView = null;
  }
  onload() {
    this.addRibbonIcon("document", "Show Most Used Words List", async () => {
      await this.showMostUsedWordsList();
    });
    this.addCommand({
      id: "show-most-used-words-list",
      name: "Show Most Used Words List",
      callback: async () => {
        await this.showMostUsedWordsList();
      }
    });
    this.registerEvent(this.app.workspace.on("file-open", this.handleFileOpen.bind(this)));
  }
  async showMostUsedWordsList() {
    if (this.wordCountMap.size === 0) {
      await this.calculateWordCountMap();
    }
    const sortedWords = this.getSortedWords();
    const topWords = sortedWords.slice(0, 100);
    const wordList = topWords.map(([word, count], index) => `${index + 1}: ${word} (${count})`);
    const leaf = this.app.workspace.getLeaf();
    const view = new MostUsedWordsView(leaf, wordList);
    leaf.open(view);
    this.activeView = view;
  }
  async calculateWordCountMap() {
    this.wordCountMap.clear();
    const vault = this.app.vault;
    const notes = vault.getMarkdownFiles();
    for (const note of notes) {
      const content = await vault.read(note);
      const words = content.split(/\s+/);
      words.forEach((word) => {
        const normalizedWord = word.toLowerCase();
        if (normalizedWord.length > 0) {
          const count = this.wordCountMap.get(normalizedWord) || 0;
          this.wordCountMap.set(normalizedWord, count + 1);
        }
      });
    }
    if (this.activeView) {
      const sortedWords = this.getSortedWords();
      const topWords = sortedWords.slice(0, 100);
      const wordList = topWords.map(([word, count], index) => `${index + 1}: ${word} (${count})`);
      this.activeView.updateContent(wordList);
    }
  }
  getSortedWords() {
    return Array.from(this.wordCountMap.entries()).sort((a, b) => b[1] - a[1]);
  }
  handleFileOpen(file) {
    this.calculateWordCountMap();
  }
  onunload() {
    this.wordCountMap.clear();
  }
};
var MostUsedWordsView = class extends import_obsidian.View {
  constructor(leaf, wordList) {
    super(leaf);
    this.wordList = wordList;
  }
  getViewType() {
    return "most-used-words-view";
  }
  getDisplayText() {
    return "Most Used Words";
  }
  onload() {
    this.containerEl.addClass("markdown-preview-view");
    this.containerEl.style.overflow = "auto";
    this.updateContent(this.wordList);
  }
  updateContent(wordList) {
    this.containerEl.empty();
    const contentDiv = document.createElement("div");
    contentDiv.classList.add("markdown-preview-view-content");
    wordList.forEach((item) => {
      const itemDiv = document.createElement("div");
      itemDiv.textContent = item;
      contentDiv.appendChild(itemDiv);
    });
    this.containerEl.appendChild(contentDiv);
  }
};
//# sourceMappingURL=data:application/json;base64,
